#!/bin/bash
# --------------------------------------------------------------------
# 23884895 - Xuechen Mao
# Purpose: Process and analyze the board game dataset, accept both .txt and .tsv files, and then extract information: 
# - 1. Find the most popular game mechanic and domains - based on appearance
# 2. Calculate Pearson correlation coefficients between Year Published and Average rating
# 3. Calculate Pearson correlation coefficients between Game Complexity and Average rating
# Usage: ./analysis <input_file>
# --------------------------------------------------------------------

# Check if exactly one argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: ./analysis $0 input_file" >&2
    exit 1
fi

file="$1"

# Check if input file exists
if [ ! -f "$file" ]; then
    echo "Error: Input file '$file' does not exist" >&2
    exit 1
fi

# Check file extension and preprocess if needed
if [[ "$file" == *.txt ]]; then
    # If the input is a txt file, preprocess it first
    cleaned_data=$(./preprocess "$file")
    if [ $? -ne 0 ]; then
        echo "Error: Preprocessing failed" >&2
        exit 1
    fi
else
    # If the input is already a tsv file, use it directly
    cleaned_data=$(cat "$file")
fi

# Process the data with awk
echo "$cleaned_data" | awk -F$'\t' '
BEGIN {
    # Set column indices based on their fixed positions
    year_col = 3
    rate_col = 9
    comp_col = 11
    mech_col = 13
    dom_col = 14
}

NR > 1 {  # Skip header
    # replace comma spacing in Mechanics and Domains columns for counting appearances, e.g "a , b" to "a,b"
    gsub(/ *, */, ",", $mech_col)
    gsub(/ *, */, ",", $dom_col)

    # Count unique mechanics, create a dictionary to store the count of each mechanic
    n = split($mech_col, mlist, ",")
    for (j = 1; j <= n; j++) {
        key = mlist[j]
        gsub(/^ +| +$/, "", key)
        if (key != "") mech_count[key]++
    }

    # Count unique domains (split by comma)
    m = split($dom_col, dlist, ",")
    for (j = 1; j <= m; j++) {
        key = dlist[j]
        gsub(/^ +| +$/, "", key)  # trim whitespace
        if (key != "") dom_count[key]++
    }

    # Calculate sums for Year vs Rating correlation
    if ($year_col != "" && $rate_col != "") {
        y = $year_col + 0  # convert to number
        r = $rate_col + 0
        sum_y += y; sum_r += r
        sum_y2 += y * y; sum_r2 += r * r
        sum_yr += y * r; n1++
    }

    # Calculate sums for Complexity vs Rating correlation
    if ($comp_col != "" && $rate_col != "") {
        c = $comp_col + 0  # convert to number
        r2 = $rate_col + 0
        sum_c += c; sum_r2b += r2
        sum_c2 += c * c; sum_r2sq += r2 * r2
        sum_cr += c * r2; n2++
    }
}

END {
    # Find most popular mechanics by comparing counts
    max_mech = 0
    for (k in mech_count) {
        if (mech_count[k] > max_mech) {
            max_mech = mech_count[k]
            max_mech_name = k
        }
    }

    # Find most popular domain by comparing counts
    max_dom = 0
    for (k in dom_count) {
        if (dom_count[k] > max_dom) {
            max_dom = dom_count[k]
            max_dom_name = k
        }
    }

    # Output results
    printf "The most popular game mechanics is %s found in %d games\n", max_mech_name, max_mech
    printf "The most popular game domain is %s found in %d games\n", max_dom_name, max_dom

    # calculate correlation for 1. year published vs average rating; 2. complexity vs average rating
    # if there are not at least 2 valid (non-empty, numeric) data points, throw error result

    # 1. Year vs Rating correlation
    if (n1 >= 2) {
        cov1 = sum_yr - (sum_y * sum_r / n1)
        sd_y = sqrt(sum_y2 - (sum_y^2 / n1))
        sd_r = sqrt(sum_r2 - (sum_r^2 / n1))
        if (sd_y > 0 && sd_r > 0) {
            corr1 = cov1 / (sd_y * sd_r)
            printf "The correlation between the year of publication and the average rating is %.3f\n", corr1
        } else {
            print "Not enough variation to compute correlation" >"/dev/stderr"
        }
    } else {
        print "The data should be at least 2, otherwise cannot compute correlation" >"/dev/stderr" 
    }

    # 2. Complexity vs Rating correlation
    if (n2 >= 2) {
        cov2 = sum_cr - (sum_c * sum_r2b / n2)
        sd_c = sqrt(sum_c2 - (sum_c^2 / n2))
        sd_r2 = sqrt(sum_r2sq - (sum_r2b^2 / n2))
        if (sd_c > 0 && sd_r2 > 0) {
            corr2 = cov2 / (sd_c * sd_r2)
            printf "The correlation between the complexity of a game and its average rating is %.3f\n", corr2
        } else {
            print "Not enough variation to compute correlation" >"/dev/stderr"
        }
    } else {
        print "The data should be at least 2, otherwise cannot compute correlation" >"/dev/stderr" 
    }
}'